// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  image         String?
  points        Int      @default(0)
  streak        Int      @default(0)
  lastStudyDate DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  questions         Question[]
  focusSessions     FocusSession[]
  spacedRepetitions SpacedRepetition[]
  achievements      UserAchievement[]
  
  @@map("users")
}

model Question {
  id           String   @id @default(cuid())
  userId       String
  question     String
  answer       String
  topic        String
  subtopic     String?
  difficulty   Int      @default(1) // 1-5 scale
  createdAt    DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, question])
  @@map("questions")
}

model FocusSession {
  id              String   @id @default(cuid())
  userId          String
  duration        Int      // in minutes
  distractions    Int      @default(0)
  completed       Boolean  @default(false)
  pointsEarned    Int      @default(0)
  startTime       DateTime
  endTime         DateTime?
  createdAt       DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("focus_sessions")
}

model SpacedRepetition {
  id              String   @id @default(cuid())
  userId          String
  topic           String
  question        String
  answer          String
  interval        Int      @default(1) // days until next review
  repetitions     Int      @default(0)
  easeFactor      Float    @default(2.5)
  nextReviewDate  DateTime
  lastReviewDate  DateTime?
  quality         Int?     // 0-5 quality rating
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, question])
  @@map("spaced_repetitions")
}

model Achievement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String
  points      Int
  condition   String   // JSON string describing unlock condition
  
  users UserAchievement[]
  
  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}